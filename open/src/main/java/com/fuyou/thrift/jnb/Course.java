/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.fuyou.thrift.jnb;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class Course implements org.apache.thrift.TBase<Course, Course._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Course");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField INSTRUCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("instructor", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ROOM_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("roomNumber", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STUDENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("students", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CourseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CourseTupleSchemeFactory());
  }

  public int id; // required
  public String number; // required
  public String name; // required
  public Person instructor; // required
  public String roomNumber; // required
  public List<Person> students; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NUMBER((short)2, "number"),
    NAME((short)3, "name"),
    INSTRUCTOR((short)4, "instructor"),
    ROOM_NUMBER((short)5, "roomNumber"),
    STUDENTS((short)6, "students");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NUMBER
          return NUMBER;
        case 3: // NAME
          return NAME;
        case 4: // INSTRUCTOR
          return INSTRUCTOR;
        case 5: // ROOM_NUMBER
          return ROOM_NUMBER;
        case 6: // STUDENTS
          return STUDENTS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTRUCTOR, new org.apache.thrift.meta_data.FieldMetaData("instructor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Person.class)));
    tmpMap.put(_Fields.ROOM_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("roomNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STUDENTS, new org.apache.thrift.meta_data.FieldMetaData("students", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Person.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Course.class, metaDataMap);
  }

  public Course() {
  }

  public Course(
    int id,
    String number,
    String name,
    Person instructor,
    String roomNumber,
    List<Person> students)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.number = number;
    this.name = name;
    this.instructor = instructor;
    this.roomNumber = roomNumber;
    this.students = students;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Course(Course other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.id = other.id;
    if (other.isSetNumber()) {
      this.number = other.number;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetInstructor()) {
      this.instructor = new Person(other.instructor);
    }
    if (other.isSetRoomNumber()) {
      this.roomNumber = other.roomNumber;
    }
    if (other.isSetStudents()) {
      List<Person> __this__students = new ArrayList<Person>();
      for (Person other_element : other.students) {
        __this__students.add(new Person(other_element));
      }
      this.students = __this__students;
    }
  }

  public Course deepCopy() {
    return new Course(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.number = null;
    this.name = null;
    this.instructor = null;
    this.roomNumber = null;
    this.students = null;
  }

  public int getId() {
    return this.id;
  }

  public Course setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bit_vector.clear(__ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return __isset_bit_vector.get(__ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bit_vector.set(__ID_ISSET_ID, value);
  }

  public String getNumber() {
    return this.number;
  }

  public Course setNumber(String number) {
    this.number = number;
    return this;
  }

  public void unsetNumber() {
    this.number = null;
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return this.number != null;
  }

  public void setNumberIsSet(boolean value) {
    if (!value) {
      this.number = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Course setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public Person getInstructor() {
    return this.instructor;
  }

  public Course setInstructor(Person instructor) {
    this.instructor = instructor;
    return this;
  }

  public void unsetInstructor() {
    this.instructor = null;
  }

  /** Returns true if field instructor is set (has been assigned a value) and false otherwise */
  public boolean isSetInstructor() {
    return this.instructor != null;
  }

  public void setInstructorIsSet(boolean value) {
    if (!value) {
      this.instructor = null;
    }
  }

  public String getRoomNumber() {
    return this.roomNumber;
  }

  public Course setRoomNumber(String roomNumber) {
    this.roomNumber = roomNumber;
    return this;
  }

  public void unsetRoomNumber() {
    this.roomNumber = null;
  }

  /** Returns true if field roomNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomNumber() {
    return this.roomNumber != null;
  }

  public void setRoomNumberIsSet(boolean value) {
    if (!value) {
      this.roomNumber = null;
    }
  }

  public int getStudentsSize() {
    return (this.students == null) ? 0 : this.students.size();
  }

  public java.util.Iterator<Person> getStudentsIterator() {
    return (this.students == null) ? null : this.students.iterator();
  }

  public void addToStudents(Person elem) {
    if (this.students == null) {
      this.students = new ArrayList<Person>();
    }
    this.students.add(elem);
  }

  public List<Person> getStudents() {
    return this.students;
  }

  public Course setStudents(List<Person> students) {
    this.students = students;
    return this;
  }

  public void unsetStudents() {
    this.students = null;
  }

  /** Returns true if field students is set (has been assigned a value) and false otherwise */
  public boolean isSetStudents() {
    return this.students != null;
  }

  public void setStudentsIsSet(boolean value) {
    if (!value) {
      this.students = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case INSTRUCTOR:
      if (value == null) {
        unsetInstructor();
      } else {
        setInstructor((Person)value);
      }
      break;

    case ROOM_NUMBER:
      if (value == null) {
        unsetRoomNumber();
      } else {
        setRoomNumber((String)value);
      }
      break;

    case STUDENTS:
      if (value == null) {
        unsetStudents();
      } else {
        setStudents((List<Person>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case NUMBER:
      return getNumber();

    case NAME:
      return getName();

    case INSTRUCTOR:
      return getInstructor();

    case ROOM_NUMBER:
      return getRoomNumber();

    case STUDENTS:
      return getStudents();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NUMBER:
      return isSetNumber();
    case NAME:
      return isSetName();
    case INSTRUCTOR:
      return isSetInstructor();
    case ROOM_NUMBER:
      return isSetRoomNumber();
    case STUDENTS:
      return isSetStudents();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Course)
      return this.equals((Course)that);
    return false;
  }

  public boolean equals(Course that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_number = true && this.isSetNumber();
    boolean that_present_number = true && that.isSetNumber();
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (!this.number.equals(that.number))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_instructor = true && this.isSetInstructor();
    boolean that_present_instructor = true && that.isSetInstructor();
    if (this_present_instructor || that_present_instructor) {
      if (!(this_present_instructor && that_present_instructor))
        return false;
      if (!this.instructor.equals(that.instructor))
        return false;
    }

    boolean this_present_roomNumber = true && this.isSetRoomNumber();
    boolean that_present_roomNumber = true && that.isSetRoomNumber();
    if (this_present_roomNumber || that_present_roomNumber) {
      if (!(this_present_roomNumber && that_present_roomNumber))
        return false;
      if (!this.roomNumber.equals(that.roomNumber))
        return false;
    }

    boolean this_present_students = true && this.isSetStudents();
    boolean that_present_students = true && that.isSetStudents();
    if (this_present_students || that_present_students) {
      if (!(this_present_students && that_present_students))
        return false;
      if (!this.students.equals(that.students))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Course other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Course typedOther = (Course)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(typedOther.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, typedOther.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstructor()).compareTo(typedOther.isSetInstructor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstructor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instructor, typedOther.instructor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRoomNumber()).compareTo(typedOther.isSetRoomNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomNumber, typedOther.roomNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStudents()).compareTo(typedOther.isSetStudents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStudents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.students, typedOther.students);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Course(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    if (this.number == null) {
      sb.append("null");
    } else {
      sb.append(this.number);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instructor:");
    if (this.instructor == null) {
      sb.append("null");
    } else {
      sb.append(this.instructor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("roomNumber:");
    if (this.roomNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.roomNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("students:");
    if (this.students == null) {
      sb.append("null");
    } else {
      sb.append(this.students);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CourseStandardSchemeFactory implements SchemeFactory {
    public CourseStandardScheme getScheme() {
      return new CourseStandardScheme();
    }
  }

  private static class CourseStandardScheme extends StandardScheme<Course> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Course struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.number = iprot.readString();
              struct.setNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INSTRUCTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.instructor = new Person();
              struct.instructor.read(iprot);
              struct.setInstructorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROOM_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.roomNumber = iprot.readString();
              struct.setRoomNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STUDENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.students = new ArrayList<Person>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  Person _elem10; // required
                  _elem10 = new Person();
                  _elem10.read(iprot);
                  struct.students.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setStudentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Course struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.number != null) {
        oprot.writeFieldBegin(NUMBER_FIELD_DESC);
        oprot.writeString(struct.number);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.instructor != null) {
        oprot.writeFieldBegin(INSTRUCTOR_FIELD_DESC);
        struct.instructor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.roomNumber != null) {
        oprot.writeFieldBegin(ROOM_NUMBER_FIELD_DESC);
        oprot.writeString(struct.roomNumber);
        oprot.writeFieldEnd();
      }
      if (struct.students != null) {
        oprot.writeFieldBegin(STUDENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.students.size()));
          for (Person _iter11 : struct.students)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CourseTupleSchemeFactory implements SchemeFactory {
    public CourseTupleScheme getScheme() {
      return new CourseTupleScheme();
    }
  }

  private static class CourseTupleScheme extends TupleScheme<Course> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Course struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetNumber()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetInstructor()) {
        optionals.set(3);
      }
      if (struct.isSetRoomNumber()) {
        optionals.set(4);
      }
      if (struct.isSetStudents()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeI32(struct.id);
      }
      if (struct.isSetNumber()) {
        oprot.writeString(struct.number);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetInstructor()) {
        struct.instructor.write(oprot);
      }
      if (struct.isSetRoomNumber()) {
        oprot.writeString(struct.roomNumber);
      }
      if (struct.isSetStudents()) {
        {
          oprot.writeI32(struct.students.size());
          for (Person _iter12 : struct.students)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Course struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readI32();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.number = iprot.readString();
        struct.setNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.instructor = new Person();
        struct.instructor.read(iprot);
        struct.setInstructorIsSet(true);
      }
      if (incoming.get(4)) {
        struct.roomNumber = iprot.readString();
        struct.setRoomNumberIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.students = new ArrayList<Person>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            Person _elem15; // required
            _elem15 = new Person();
            _elem15.read(iprot);
            struct.students.add(_elem15);
          }
        }
        struct.setStudentsIsSet(true);
      }
    }
  }

}

